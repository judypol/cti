<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Af//8AP///gH///+D///////
</value>
  </data>
</root>